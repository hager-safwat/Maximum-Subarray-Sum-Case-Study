# -*- coding: utf-8 -*-
"""Brute_force

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PhTOvvBXhab8nUvi2m8DEzbPFFciKby0
"""

A = [[1, 2, -1, -4, -20],
     [-8, -3, 4, 2, 1]
     [3, 8, 10, 1, 3],
     [-4, -1, 1, 7, -6]]

def max_subarry(A):
    max_sum =float('-inf')
    first_row= 0
    last_row =0
    first_col = 0
    last_col = 0
    rows =len(A)
    cols =len(A[0])

    for i in range(rows) :
      for j in range(cols):
          for k in range(i,rows):
              for l in range(j,cols):
                  current_sum = 0
                  for s in range(i,k+1):
                     for o in range(j, l+1):
                         current_sum += A[s][o]

                  if current_sum > max_sum :
                     max_sum = current_sum
                     first_row, last_row, first_col, last_col, = i , k ,j , l

    return max_sum, first_row, last_row, first_col, last_col

result = max_subarry(A)
print("sum:", result[0])
print("indeces({},{},{}, {})".format(result[1], result[2], result[3], result[4]))

#1.1.2 Constrained Formulation

A = [[1, 2, -1, -4, -20],
     [-8, -3, 4, 2, 1],
     [3, 8, 10, 1, 3],
     [-4, -1, 1, 7, -6]]

def max_subarray(A, K, L):
    max_sum = float('-inf')
    first_row = 0
    last_row = 0
    first_col = 0
    last_col = 0
    rows = len(A)
    cols = len(A[0])

    for i in range(rows):
        for j in range(cols):
            for k in range(i, rows):
                for l in range(j, cols):
                    current_sum = 0

                    if (k - i + 1) * (l - j + 1) == K * L:
                        for s in range(i, k + 1):
                            for o in range(j, l + 1):
                                current_sum += A[s][o]

                        if current_sum > max_sum:
                            max_sum = current_sum
                            first_row, last_row, first_col, last_col = i, k, j, l

    return max_sum, first_row, last_row, first_col, last_col
K = 2
L = 2

result = max_subarray(A, K, L)
print("Sum:", result[0])
print("Indices({}, {}, {}, {})".format(result[1], result[2], result[3], result[4]))

#Gentic Aproach

import numpy as np


matrix_A = [[1, 2, -1, -4, -20],
     [-8, -3, 4, 2, 1],
     [3, 8, 10, 1, 3],
     [-4, -1, 1, 7, -6]]

def initial_population(population_size, array_size):
    return [np.random.randint(0,2,array_size) for _ in range(population_size)]

def calc_fitness(subarray, matrix):
    return np.sum(subarray * matrix)

def mutate(subarray):
    mutation_point = np.random.randint(len(subarray))
    subarray [mutation_point] = 1 - subarray[mutation_point]
    return subarray



def crossover(parent1, parent2) :
  crossover_point = np.random.randint(len(parent1))
  child = np.concatenate((parent1[: crossover_point], parent2[crossover_point:]))
  return child

def genatic_max_subarry_sum(matrix, population_size, generations):
    rows, cols = len(matrix), len(matrix[0])
    population = initial_population(population_size, cols)

    for generation in range(generations):
        fitness_scores = [calc_fitness(candidate, matrix) for candidate in population]
        best_candidate = population[np.argmax(fitness_scores)]

        if np.max(fitness_scores) == np.sum(np.abs(matrix)):
         break

         new_pop = [best_candidate]

         for _ in range(population_size - 1) :
          parent1 = population[np.random.choice(range(population_size))]
          parent2 = population[np.random.choice(range(population_size))]
          child = crossover(parent1, parent2)

          if np.random.rand() < 0.1 :
             child = mutate(child)
          new_pop.append(child)

         population= new_pop

    best_solution = population[np.argmax([calc_fitness(candidate, matrix) for candidate in population])]

    return best_solution, calc_fitness(best_solution,matrix)

best_subarray, max_subarry_sum = genatic_max_subarry_sum(matrix_A, population_size=10, generations= 10)

print("best subarry (1: include, 0: exclude)", best_subarray)
print("max sub array sum:", max_subarry_sum)